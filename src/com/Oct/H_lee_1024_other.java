package com.Oct;

/**
 * @author ZDH
 * @version 1.0
 * @date 2020/10/24 19:43
 */
public class H_lee_1024_other {

    public static int F(int[][] clips,int T){
    if (clips == null) {
        return 0;
    }

    int[] maxEnd = new int[T];  // 用于保存 以当前数字(下标)为起点 的区间的 最大的结束位置

        /*
            遍历clips，初始化maxEnd数组(每个元素开头的区间的最大结束位置)
         */
        for (int[] clip : clips) {
        if (clip[0] < T) {
            maxEnd[clip[0]] = Math.max(maxEnd[clip[0]], clip[1]);
        }
    }

    /*
        根据maxEnd数组，计算最终结果
            因为maxEnd[i]数组为最大结束位置，因此：
                1、当前元素 == 本区间最大元素，
                    即：区间断开，无法连续到后续位置，返回-1
                2、当前元素 == 上一个区间的最大结束元素，
                    即：到达了上一个满足条件的区间的结束位置
                    这时的last为当前最大的结束位置，我们将其放入满足条件的区间集合之中
                    (因为本题只需要我们记录 满足条件的区间个数，因为只需要 更新count和pre 即可)
     */
    int pre = 0;    // 记录 结果中上一次的最大结束位置(本轮的最小开始位置)
    int last = 0;   // 记录当前遍历到的 区间最大结束位置
    int count = 0; // 记录结果
        for (int i = 0; i < T; i++) {
        last = Math.max(maxEnd[i], last);
        if (i == last) {    // 当前元素 == 本区间最大元素(无法到达后续位置)
            return -1;
        }

        if (i == pre) { // 当前元素 == 上一个区间的最大元素
            count++;
            pre = last;
        }
    }
        return count;
    }

    public static void main(String[] args) {
//        int[][] test = {{0,1},{0,2,4,3},{6,2},{5,1}};
//        test(test);
//          int[][] clips = {{0,6},{1,7},{0,9},{2,10},{0,4},{0,2},{10,10},{7,9},{0,3}};
//          int T =15;
//         System.out.println(videoStitching(clips,T));

//         int[][] clips1 = {{0,4},{2,8}};
//         int T1 = 5;
//         System.out.println(videoStitching(clips1,T1));

//         int[][] clips2 = {{5,7},{1,8},{0,0},{2,3},{4,5},{0,6},{5,10},{7,10}};
//         int T2 = 5;
//         System.out.println(videoStitching(clips2,T2));
//
//         [[0,6],[1,7],[0,9],[2,10],[0,4],[0,2],[10,10],[7,9],[0,3]]
//        15

        int[][] clips1 = {{24,28},{10,56},{50,78},{38,77},{38,78},{3,69},{33,49},{66,89},{73,83},{6,12},{24,86},{67,82},{18,26},{1,57},{13,30},{8,56},{58,78},{2,84},{35,39},{45,51},{30,32},{19,31},{32,70},{1,15},{16,18},{32,87},{32,87},{39,42},{81,84},{25,61},{26,34},{10,82},{17,34},{56,72},{17,22},{8,83},{5,21},{3,79},{12,73},{0,28},{74,76},{41,79},{4,60},{51,90},{10,41},{47,90},{44,56},{13,16},{43,83},{0,22},{30,40},{8,27},{57,58},{0,26},{16,66},{62,89},{2,74},{17,61},{25,28},{23,54},{42,79},{14,28},{26,77},{34,36},{17,42},{72,81},{12,87},{3,57},{81,88},{65,87},{35,74},{19,77},{10,53},{38,75},{14,90},{10,90},{57,62},{37,74},{24,80},{52,63},{52,55},{64,73},{45,79},{12,19},{26,38},{40,81},{28,48},{33,62},{18,50},{9,40}};
        int T1 = 72;
        System.out.println(F(clips1,T1));
    }

}
